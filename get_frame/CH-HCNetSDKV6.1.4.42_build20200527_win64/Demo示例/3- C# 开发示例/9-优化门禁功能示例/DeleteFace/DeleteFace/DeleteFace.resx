<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="panel1.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEASABIAAD/2wBDAAoHBwgHBgoICAgLCgoLDhgQDg0NDh0VFhEYIx8lJCIfIiEm
        KzcvJik0KSEiMEExNDk7Pj4+JS5ESUM8SDc9Pjv/2wBDAQoLCw4NDhwQEBw7KCIoOzs7Ozs7Ozs7Ozs7
        Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozv/wAARCABWA4QDASIAAhEBAxEB/8QA
        HwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIh
        MUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVW
        V1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXG
        x8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQF
        BgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAV
        YnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOE
        hYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq
        8vP09fb3+Pn6/9oADAMBAAIRAxEAPwClRRRXpHgiiiiigYUoooFACilFIKWgAFLSUtAC0tJS0AFLSUtM
        BaWkpRQIKWkpRQIUUCgUUAKKWkpaAFpabS0xCilFJS0wFFKKSikAopaSloAWiiikMUUopKWgApaSloGK
        KWkFLQAClFJS0hiiiiigBaWkpaAFFFAopDFoFFLQMKUUlLQAtLSClFAxRQKQUtIBRS0lLQAUtJSikMUU
        tIKKAFpaQUtAxaKKKAFpaSlFIYtKKQUUAOFApKWgYtKKSloAKWkpRSGKKcKaKUUDHClFIKUUhjhThTRS
        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
</value>
  </data>
</root>